#include <EEPROM.h>
//карта входов
         int volt = 0;   //номер аналогового входа бортового напряжения
         int fuel = 1;   //номер аналогового входа датчика топлива
         int temp = 2;   //номер аналогового входа датчика температуры
         int igni = 4;   //номер цифрового входа сигнала зажигания
         int trnl = 5;   //номер цифрового входа поворот левый
         int trnr = 6;   //номер цифрового входа поворот правый
         int ligh = 7;   //номер цифрового входа габариты
         int loli = 8;   //номер цифрового входа свет ближний
         int hili = 9;   //номер цифрового входа свет дальний
         int fogf = 10;  //номер цифрового входа ПТФ передние
         int fogr = 11;  //номер цифрового входа ПТФ задние
         int revr = 12;  //номер цифрового входа реверс
         int lm01 = 23;  //номер цифрового входа контрольная лампа  1
         int lm02 = 25;  //номер цифрового входа контрольная лампа  2
         int lm03 = 27;  //номер цифрового входа контрольная лампа  3
         int lm04 = 29;  //номер цифрового входа контрольная лампа  4(-)
         int lm05 = 31;  //номер цифрового входа контрольная лампа  5(-)
         int lm06 = 33;  //номер цифрового входа контрольная лампа  6
         int lm07 = 35;  //номер цифрового входа контрольная лампа  7
         int lm08 = 37;  //номер цифрового входа контрольная лампа  8
         int lm09 = 39;  //номер цифрового входа контрольная лампа  9
         int lm10 = 41;  //номер цифрового входа контрольная лампа 10
         int lm11 = 43;  //номер цифрового входа контрольная лампа 11
         int lm12 = 45;  //номер цифрового входа контрольная лампа 12(-)
         int lm13 = 47;  //номер цифрового входа контрольная лампа 13(-)
         int lm14 = 49;  //номер цифрового входа контрольная лампа 14
         int lm15 = 51;  //номер цифрового входа контрольная лампа 15
         int lm16 = 53;  //номер цифрового входа контрольная лампа 16
// байтовый массив для вывода данных ************************************************************************************
         byte          Out[40]   = {238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255};
//***********************************************************************************************************************
         unsigned int  Voltage   = 0;              //напряжение
         unsigned int  Fuel      = 0;              //топливо
         unsigned int  Temp      = 0;              //температура ОЖ
         byte          Ign       = 0;              //состояние зажигания текущее
         byte          rst       = 0;              //состояние зажигания предыдущее
         byte          i;
//******************************************************************************************************
volatile unsigned long micros_sp = 0;
volatile byte          sz        = 0;              //счетчик обнуления
volatile unsigned int  sp        = 0;              //скорость
volatile boolean       st        = false;          //триггер
//******************************************************************************************************
volatile unsigned long micros_th = 0;
volatile byte          tz        = 0;              //счетчик обнуления
volatile unsigned int  th        = 0;              //обороты
volatile boolean       tt        = false;          //триггер
//******************************************************************************************************
volatile unsigned long odometr   = 0;              //счетчик импульсов одометра
//******************************************************************************************************
         byte          sp_sens   = 6;              //количество имп./м датчика скорости
         unsigned int  sp_mult   = 0;              //коэфф. пересчета частоты в скорость
         unsigned int  od_mult   = 0;              //коэфф. пересчета импульсов в сотни метров
//******************************************************************************************************
void setup(){
  Serial1.begin(115200);
  attachInterrupt(0, speedometr, FALLING);         //прерывание спидометра по фронтам импульса
  attachInterrupt(1, tahometr,   RISING);          //прерывание тахометра по фронтам импульса
  odometr = EEPROM_ulong_read(0);                  //чтение счетчика импульсов и EEPROM
  sp_mult = 3600000 / sp_sens;                     //вычисление коэфф. пересчета частоты в скорость
  od_mult = sp_sens * 100;                         //вычисление коэфф. пересчета импульсов в сотни метров
}
//******************************************************************************************************
void loop(){
  Voltage = analogRead(volt) * 0.153;                  // считывание напряжения и перевод в десятые вольта
  Fuel    = analogRead(fuel);                          // считывание значения датчика топлива в единицах АЦП
  Temp    = analogRead(temp);                          // считывание значения датчика температуры в единицах АЦП
  Ign     = digitalRead(igni);                         // считывание состояния входа зажигания
//формирование пакета***********************************************************************************
  Out[1]  = sp      >> 8; Out[2]  = sp;                // скорость
  Out[3]  = th      >> 8; Out[4]  = th;                // обороты
  Out[5]  = Voltage >> 8; Out[6]  = Voltage;           // напряжение
  Out[7]  = Fuel    >> 8; Out[8]  = Fuel;              // топливо
  Out[9]  = Temp    >> 8; Out[10] = Temp;              // темп. ОЖ
  Out[11] = (odometr / od_mult) >> 24;                 // одометр 3й байт
  Out[12] = (odometr / od_mult) >> 16;                 // одометр 2й байт
  Out[13] = (odometr / od_mult) >> 8;                  // одометр 1й байт
  Out[14] = (odometr / od_mult);                       // одометр 0й байт
  Out[33] = Ign           << 7;                        // 7й бит, зажигание
  Out[34] = digitalRead(trnl) << 7 +                   // 7й бит, поворот левый
            digitalRead(trnr) << 6 +                   // 6й бит, поворот правый
            digitalRead(ligh) << 5 +                   // 5й бит, габариты
            digitalRead(loli) << 4 +                   // 4й бит, свет ближний
            digitalRead(hili) << 3 +                   // 3й бит, свет дальний
            digitalRead(fogf) << 2 +                   // 2й бит, ПТФ передние
            digitalRead(fogr) << 1 +                   // 1й бит, ПТФ задние
            digitalRead(revr);                         // 0й бит, реверс
  Out[35] = digitalRead(lm01) << 7 +                   // 7й бит, контрольная лампа 1
            digitalRead(lm02) << 6 +                   // 6й бит, контрольная лампа 2
            digitalRead(lm03) << 5 +                   // 5й бит, контрольная лампа 3
           !digitalRead(lm04) << 4 +                   // 4й бит, контрольная лампа 4
           !digitalRead(lm05) << 3 +                   // 3й бит, контрольная лампа 5
            digitalRead(lm06) << 2 +                   // 2й бит, контрольная лампа 6
            digitalRead(lm07) << 1 +                   // 1й бит, контрольная лампа 7
            digitalRead(lm08);                         // 0й бит, контрольная лампа 8
  Out[36] = digitalRead(lm09) << 7 +                   // 7й бит, контрольная лампа 9
            digitalRead(lm10) << 6 +                   // 6й бит, контрольная лампа 10
            digitalRead(lm11) << 5 +                   // 5й бит, контрольная лампа 11
           !digitalRead(lm12) << 4 +                   // 4й бит, контрольная лампа 12
           !digitalRead(lm13) << 3 +                   // 3й бит, контрольная лампа 13
            digitalRead(lm14) << 2 +                   // 2й бит, контрольная лампа 14
            digitalRead(lm15) << 1 +                   // 1й бит, контрольная лампа 15
            digitalRead(lm16);                         // 0й бит, контрольная лампа 16
// вывод массива в UART1 *******************************************************************************
    Serial1.write (Out, 40);
    Serial1.flush();
//******************************************************************************************************
  if (tz != 0){tz--;}else{th = 0;};
  if (sz != 0){sz--;}else{sp = 0;};
// запись счетчика импульсов в EEPROM *************************************************************************
  if ((Ign < rst) && (sp == 0)){
    EEPROM_ulong_write(0, odometr);
    delay(1000);
  };
//******************************************************************************************************
  rst = Ign;
  delay(50);
}
//******************************************************************************************************
void speedometr(){                                  //измеряем частоту на входе спидометра по прерыванию
  if(!st){micros_sp = micros();}
  else   {sp = (sp_mult/(micros() - micros_sp));}
  st = !st;
  sz = 30;
  odometr ++;
 }
//******************************************************************************************************
void tahometr(){                                    //измеряем частоту на входе тахометра по прерыванию
  if(!tt){micros_th = micros();}
  else   {th = (30000000/(micros() - micros_th));}
  tt = !tt;
  tz = 10;
}
// чтение двухбайтных переменных из EEPROM *************************************************************
unsigned long EEPROM_ulong_read(int addr) {
  byte raw[4];
  for(byte i = 0; i < 4; i++) raw[i] = EEPROM.read(addr+i);
  unsigned long &num = (unsigned long&)raw;
  return num;
}
// запись двухбайтных переменных в EEPROM **************************************************************
void EEPROM_ulong_write(int addr, unsigned long num) {
  byte raw[4];
  (unsigned long&)raw = num;
  for(byte i = 0; i < 4; i++) EEPROM.write(addr+i, raw[i]);
}
//******************************************************************************************************
